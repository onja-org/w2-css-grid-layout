/* Task 1: Set up the Grid Container
   Task 2: Define Grid Columns  
   Task 3: Define Grid Rows
   - Convert the wrapper div into a grid container to enable CSS Grid layout
   - Create a 3-column layout where:
     * First column takes 1 fraction of available space (sidebar)
     * Second column takes 2 fractions of available space (main content - twice as wide)
     * Third column takes 1 fraction of available space (sidebar)
   - Create a 6-row layout with varying heights:
     * Row 1: 1 fraction (header)
     * Row 2: 1 fraction (navigation/menu start)
     * Row 3: 3 fractions (main content area - tallest section)
     * Row 4: 1 fraction (continuation of side content)
     * Row 5: 1 fraction (bottom side content)
     * Row 6: 2 fractions (footer - medium height)
   - Please add display: grid
   - Please add grid-template-columns: 1fr 2fr 1fr
   - Please add grid-template-rows: 1fr 1fr 3fr 1fr 1fr 2fr
*/
.wrapper {
    height: 100vh;
    box-sizing: border-box;
    background-color: #EAF2E3;
}

/* Common styles for all grid items */
.wrapper>div {
    margin: 4px;
    display: flex;
    justify-content: center;
    align-items: center;
}

/* Task 4: Position Header
   - Make header span across all 3 columns (full width) and occupy the first row only
   - Please add grid-column: 1/4
   - Please add grid-row: 1/2
*/
.header {
    background-color: #F2A05D;
}

/* Task 5: Position Menu/Navigation
   - Place menu in the first column, spanning from row 2 to row 4 (2 rows tall)
   - Please add grid-column: 1/2
   - Please add grid-row: 2/4
*/
.menu {
    background-color: #F2E863;
}

/* Task 6: Position Main Content
   - Place main content in the middle column, spanning from row 2 to row 6 (4 rows tall - the largest content area)
   - Please add grid-column: 2/3
   - Please add grid-row: 2/6
*/
.main {
    background-color: #61E8E1;
}

/* Task 7: Position First Advertisement
   - Place first ad in the third column, spanning from row 2 to row 6 (4 rows tall, same height as main content)
   - Please add grid-column: 3/4
   - Please add grid-row: 2/6
*/
.ad1 {
    background-color: #F25757;
}

/* Task 8: Position Second Advertisement
   - Place second ad in the first column, spanning from row 4 to row 6 (2 rows tall, below the menu)
   - Please add grid-column: 1/2
   - Please add grid-row: 4/6
*/
.ad2 {
    background-color: #F25757;
}

/* Task 9: Position Footer
   - Make footer span across all 3 columns (full width) and occupy the last row only
   - Please add grid-column: 1/4
   - Please add grid-row: 6/7
*/
.footer {
    background-color: #F2A05D;
}

@media screen and (max-width: 850px) {
    /* 
    STUDENT TASK - MEDIUM SCREEN BREAKPOINT (850px)
    
    INSTRUCTIONS:
    1. Uncomment the CSS code below by removing the /*  and markers
    2. Save your file and test in browser at ~800px width
    3. Analyze how the layout changes from desktop version
    
    WHAT EACH RULE DOES:
    - .menu.max850: Makes menu span full width (columns 1-4) in row 2
    - .main.max850: Main content takes columns 1-2, spans rows 3-4
    - .ad1.max850: Ad1 moves to column 3, becomes tall (rows 3-6)
    - .ad2.max850: Ad2 goes below main content in columns 1-2, row 5
    
    UNDERSTANDING GRID POSITIONING:
    - grid-column: 1/4 means "start at line 1, end at line 4" (spans 3 columns)
    - grid-row: 3/5 means "start at row 3, end at row 5" (spans 2 rows)
    
    YOUR TASK: Remove the comment markers below and test the layout
    */

    /* .menu.max850 {
        grid-column: 1/4;
        grid-row: 2/3;
    }

    .main.max850 {
        grid-column: 1/3;
        grid-row: 3/5;
    }

    .ad1.max850 {
        grid-column: 3/4;
        grid-row: 3/6;
    }

    .ad2.max850 {
        grid-column: 1/3;
        grid-row: 5/6;
    } */
}

@media screen and (max-width: 500px) {
    /* 
    STUDENT TASK - MOBILE BREAKPOINT (500px)
    
    INSTRUCTIONS:
    1. After completing the 850px breakpoint above, uncomment this code
    2. Test at ~400px width (use browser dev tools mobile view)
    3. Observe how layout transforms to single-column stack
    
    MOBILE LAYOUT STRATEGY:
    - All content becomes full-width (grid-column: 1/4)
    - Elements stack vertically in logical order
    - Menu stays at top, main content, then ads below
    
    WHY THIS WORKS ON MOBILE:
    - Easier to read in single column
    - No horizontal scrolling needed
    - Content follows natural reading flow
    - Touch-friendly layout
    
    TESTING TIP: 
    Slowly resize your browser from wide to narrow and watch 
    how the layout transforms at each breakpoint!
    
    YOUR TASK: Remove the comment markers below and test mobile layout
    */

    /* .main {
        grid-column: 1/4;
        grid-row: 3/4;
    }

    .ad1 {
        grid-column: 1/4;
        grid-row: 4/5;
    }

    .ad2 {
        grid-column: 1/4;
        grid-row: 5/6;
    } */
}

/* 
STUDENT REFLECTION QUESTIONS:
After completing both tasks above, consider these questions:

1. How does the grid positioning change between desktop, tablet, and mobile?
2. Why might advertisements be repositioned differently on smaller screens?
3. What happens to the user experience as the screen gets smaller?
4. How do the breakpoints (850px and 500px) serve different device types?

TESTING CHECKLIST:
□ Uncommented 850px breakpoint code
□ Tested layout at ~800px browser width
□ Uncommented 500px breakpoint code  
□ Tested layout at ~400px browser width
□ Performed "shrink test" from wide to narrow
□ Answered reflection questions above

COMMON MISTAKES TO AVOID:
- Forgetting to remove both /* and */
/* markers
- Not testing at the actual breakpoint widths
- Skipping the visual testing step
- Not understanding grid line numbering (starts at 1, not 0)
*/